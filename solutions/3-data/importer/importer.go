package importer

import (
	"../addressbook"
	"math/rand"
	"time"
)

type Importer interface {
	Import(addressbook.AddressBook)
}

type defaultImporter struct {
}

func New() Importer {
	rand.Seed(time.Now().UTC().UnixNano())
	return &defaultImporter{}
}

func (di *defaultImporter) Import(ab addressbook.AddressBook) {
	for i := 0; i < 5; i++ {
		pos := rand.Intn(len(randomPeople) - 1) //pick random name
		ab.Add(randomPeople[pos])
	}
}

//random names generated by http://listofrandomnames.com
var randomPeople = []addressbook.Entry{
	addressbook.NewEntry("Pura Pizana", "pura@pizana.com"),
	addressbook.NewEntry("Susann Stillwagon", "susann@stillwagon.com"),
	addressbook.NewEntry("Gianna Seals", "gianna@seals.com"),
	addressbook.NewEntry("Adela Castelli", "adela@castelli.com"),
	addressbook.NewEntry("Ignacio Troutman", "ignacio@troutman.com"),
	addressbook.NewEntry("Christopher Kahle", "christopher@kahle.com"),
	addressbook.NewEntry("Tawanna Gaier", "tawanna@gaier.com"),
	addressbook.NewEntry("Jeremy Maddix", "jeremy@maddix.com"),
	addressbook.NewEntry("Mandy Clapper", "mandy@clapper.com"),
	addressbook.NewEntry("Adell Petterson", "adell@petterson.com"),
	addressbook.NewEntry("Georgine Tremble", "georgine@tremble.com"),
	addressbook.NewEntry("Dorris Alber", "dorris@alber.com"),
	addressbook.NewEntry("Bradley Clinton", "bradley@clinton.com"),
	addressbook.NewEntry("Luana Updike", "luana@updike.com"),
	addressbook.NewEntry("Concepcion Metcalfe", "concepcion@metcalfe.com"),
	addressbook.NewEntry("Fae Crofts", "fae@crofts.com"),
	addressbook.NewEntry("Dudley Mcbroom", "dudley@mcbroom.com"),
	addressbook.NewEntry("Ping Berwick", "ping@berwick.com"),
	addressbook.NewEntry("Janeen Roberto", "janeen@roberto.com"),
	addressbook.NewEntry("Dawn Duhaime", "dawn@duhaime.com"),
	addressbook.NewEntry("Kellye Levine", "kellye@levine.com"),
	addressbook.NewEntry("Moshe Schexnayder", "moshe@schexnayder.com"),
	addressbook.NewEntry("Edie Eggebrecht", "edie@eggebrecht.com"),
	addressbook.NewEntry("Arielle Surles", "arielle@surles.com"),
	addressbook.NewEntry("Alma Parra", "alma@parra.com"),
	addressbook.NewEntry("Desmond Natali", "desmond@natali.com"),
	addressbook.NewEntry("Summer Priester", "summer@priester.com"),
	addressbook.NewEntry("Roselia Staudt", "roselia@staudt.com"),
	addressbook.NewEntry("Frieda Slaton", "frieda@slaton.com"),
	addressbook.NewEntry("Laticia Levison", "laticia@levison.com"),
	addressbook.NewEntry("Gabriele Piland", "gabriele@piland.com"),
	addressbook.NewEntry("Bryan Tobia", "bryan@tobia.com"),
	addressbook.NewEntry("Jeremiah Hefley", "jeremiah@hefley.com"),
	addressbook.NewEntry("Oda Taitt", "oda@taitt.com"),
	addressbook.NewEntry("Milissa Sisco", "milissa@sisco.com"),
	addressbook.NewEntry("Rebecca Bensen", "rebecca@bensen.com"),
	addressbook.NewEntry("Joe Lazaro", "joe@lazaro.com"),
	addressbook.NewEntry("Richelle Espitia", "richelle@espitia.com"),
	addressbook.NewEntry("Fritz Bermudes", "fritz@bermudes.com"),
	addressbook.NewEntry("Marilu Renfrew", "marilu@renfrew.com"),
	addressbook.NewEntry("Louanne Cardinale", "louanne@cardinale.com"),
	addressbook.NewEntry("Afton Soares", "afton@soares.com"),
	addressbook.NewEntry("Kristy Pryor", "kristy@pryor.com"),
	addressbook.NewEntry("Forest Oquin", "forest@oquin.com"),
	addressbook.NewEntry("Nerissa Ashlock", "nerissa@ashlock.com"),
	addressbook.NewEntry("Lettie Stehle", "lettie@stehle.com"),
	addressbook.NewEntry("Shavon Nowlen", "shavon@nowlen.com"),
	addressbook.NewEntry("Tori Haughton", "tori@haughton.com"),
	addressbook.NewEntry("Twanna Bibee", "twanna@bibee.com"),
	addressbook.NewEntry("Ivy Rausch", "ivy@rausch.com"),
}
